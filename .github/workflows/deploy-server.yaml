name: Deploy server

on:
  push:
    branches: ['main']

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: frourio-pfl-repository
  ECS_SERVICE: frourio-pfl-service
  ECS_CLUSTER: frourio-pfl-cluster
  ECS_TASK_DEFINITION: task_definition.json
  CONTAINER_NAME: frourio-pfl-service

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy server
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ github.ref }}-${{ github.sha }}
            ${{ github.ref }}
            refs/head/main

      - name: Make envfile for cilent
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_DEBUG: false
          envkey_SOME_API_KEY: 'deploy_server_get_client_env'
          envkey_SECRET_KEY: ${{ secrets.ENV_FILE_PROD_CLIENT }}
          directory: ./
          fail_on_empty: true

      - name: Make envfile for server
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_DEBUG: false
          envkey_SOME_API_KEY: 'deploy_server_get_server_env'
          envkey_SECRET_KEY: ${{ secrets.ENV_FILE_PROD_SERVER }}
          directory: ./server
          fail_on_empty: true

      - name: Make envfile for database
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_DEBUG: 'prisma:engine'
          envkey_SOME_API_KEY: 'deploy_server_get_db_env'
          envkey_SECRET_KEY: ${{ secrets.ENV_FILE_PROD_DB }}
          directory: ./server/prisma
          fail_on_empty: true

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker buildx build --push --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./terraform/dockerfile/app/Dockerfile .
          docker buildx push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
